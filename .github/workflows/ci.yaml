name: Message Service CI - Build, Push, and Trigger CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-push-trigger:
    name: Build, Push Message Service Image, and Trigger Jenkins CD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify application-cloud.yml content
        run: |
            echo "--- Verifying content of src/main/resources/application-cloud.yml ---"
            cat src/main/resources/application-cloud.yml

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: msj9965/alog-message # Message 서비스 이미지 이름
          tags: |
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # --- 이 부분을 추가하여 빌드 캐시를 비활성화합니다. ---
          no-cache: true
      - name: Inspect Image Content
        run: |
            echo "--- Inspecting the content of the newly pushed image ---"
            # 고유한 SHA 태그를 사용하여 검사할 이미지를 지정합니다.
            IMAGE_TO_INSPECT=msj9965/alog-message:${{ steps.meta.outputs.version }}
            echo "Pulling image: ${IMAGE_TO_INSPECT}"
            docker pull ${IMAGE_TO_INSPECT}
            
            echo "Creating a temporary container to extract the JAR file..."
            # 컨테이너를 시작하지 않고 생성만 합니다.
            CONTAINER_ID=$(docker create ${IMAGE_TO_INSPECT})
            
            echo "Copying app.jar from the container..."
            docker cp ${CONTAINER_ID}:/app/app.jar ./app.jar
            
            echo "Removing the temporary container..."
            docker rm -f ${CONTAINER_ID}
            
            echo "--- Content of application-cloud.yml from INSIDE the JAR file ---"
            # unzip 명령어를 사용하여 JAR 파일 내의 특정 파일 내용을 출력합니다.
            unzip -p ./app.jar BOOT-INF/classes/application-cloud.yml || echo "Could not find application-cloud.yml inside the JAR"

      - name: Trigger Jenkins CD Pipeline for Message Service
        if: success()
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME_MESSAGE }}
          JENKINS_TRIGGER_TOKEN: ${{ secrets.JENKINS_TRIGGER_TOKEN_MESSAGE }}
          JENKINS_USER_ID: ${{ secrets.JENKINS_USER_ID }}
          JENKINS_USER_API_TOKEN: ${{ secrets.JENKINS_USER_API_TOKEN }}
          IMAGE_TO_DEPLOY_TAG: ${{ steps.meta.outputs.version }}
        run: |
          echo "Triggering Jenkins job: '${JENKINS_JOB_NAME}' for Message Service with image tag: '${IMAGE_TO_DEPLOY_TAG}'"
          curl -X POST -u "${JENKINS_USER_ID}:${JENKINS_USER_API_TOKEN}" \
            "${JENKINS_URL}/job/${JENKINS_JOB_NAME}/buildWithParameters?token=${JENKINS_TRIGGER_TOKEN}&IMAGE_TAG=${IMAGE_TO_DEPLOY_TAG}"
